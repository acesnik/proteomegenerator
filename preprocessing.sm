# Input fastq reads and performs preporcessing

# Config file contains the list of fastq reads to align

# Read groups should all be specified in the config file



rule UnalignFastqReadsByRG:
    input: lambda wildcards: config["units"][wildcards.unit]
    output: temp("out/{unit}.unaligned.bam")
    benchmark: "out/benchmarks/{unit}.unaligned.txt"
    params: n="36", R="'span[hosts=1] rusage[mem=10]'", o="out/logs/picard_unalign.out", eo="out/logs/picard_unalign.err", read_group=lambda wildcards: config["read_groups"][wildcards.unit], J="picard_unalign_{wildcards.unit}"
    shell: "java -Xmx350g -jar picard.jar FastqToSam \
            FASTQ={input[0]} \
            FASTQ2={input[1]} \
            OUTPUT={output} \
            READ_GROUP_NAME={params.read_group} \
            SAMPLE_NAME={config["sample"]}"


rule AlignFastqReadsByRG:
    input: lambda wildcards: config["units"][wildcards.unit]
    output: temp("out/{unit}.aligned.bam")
    benchmark: "out/benchmarks/{unit}.align.txt"
    params: n="36", R="'span[hosts=1] rusage[mem=10]'", o="out/logs/bwa_fastq.out", eo="out/logs/bwa_fastq.err", read_group=lambda wildcards: config["read_groups"][wildcards.unit], J="bwa_align_{wildcards.unit}"
    shell: "bwa mem -M \
            -t {params.n} \
            -R '{params.read_group}' \
            {config["ref"]} \
            {input} | \
            samtools view -Shu -@ {params.n} - | \
            sambamba sort -n -m 350G --tmpdir {TMP} -t {params.n} -o {output}"

rule MergeUnmappedAndAlignedBAMs:
    input: aligned="out/{readgroup}.aligned.bam", unaligned="out/{readgroup}.unaligned.bam"
    output: "out/{readgroup}.aligned_unaligned_merged.bam"
    params: n="36", R="'span[hosts=1] rusage[mem=10]'", o="out/logs/merge_aubam.out", eo="out/logs/merge_aubam.err", J="merge_aubam"
    shell: "java -Xmx350g -jar picard.jar MergeBamAlignment \
            TMP_DIR={TMP} \
            VALIDATION_STRINGENCY=SILENT \
            EXPECTED_ORIENTATIONS=FR \
            ATTRIBUTES_TO_RETAIN=X0 \
            ALIGNED_BAM={input.aligned} \
            UNMAPPED_BAM={input.unaligned} \
            OUTPUT={output} \
            REFERENCE_SEQUENCE={config[ref]} \
            PAIRED_RUN=true \
            SORT_ORDER='unsorted' \
            IS_BISULFITE_SEQUENCE=false \
            ALIGNED_READS_ONLY=false \
            CLIP_ADAPTERS=false \
            MAX_RECORDS_IN_RAM=85000000 \
            ADD_MATE_CIGAR=true \
            MAX_INSERTIONS_OR_DELETIONS=-1 \
            PRIMARY_ALIGNMENT_STRATEGY=MostDistant \
            PROGRAM_RECORD_ID='bwamem' \
            PROGRAM_GROUP_VERSION={BWA_VERSION} \
            PROGRAM_GROUP_COMMAND_LINE={BWA} \
            PROGRAM_GROUP_NAME='bwamem' \
            UNMAP_CONTAMINANT_READS=true"

# 1 sample but many units (readgroups)

# rule MergeFqRGsAndMarkDuplicates:
#     input: temp(lambda wildcards: expand("out/{sample}.aligned_unaligned_merged.bam", sample=config["samples"][wildcards.sample]))
#     output: bam=temp("out/{sample}.RGmerged.dedup.bam")
#     params: n="36", R="'span[hosts=1] rusage[mem=11]'", o="out/logs/mergeRGs_markdups.out", eo="out/logs/mergeRGs_markdups.err", J="mergeRGs_markdups"
#     shell: "picard MarkDuplicates -Xmx390g TMP_DIR={TMP} \
#             $(echo '{input}' | sed -r \'s/[^ ]+/INPUT=&/g') \
#             OUTPUT={output.bam} \
#             METRICS_FILE=out/logs/markdups.metrics \
#             VALIDATION_STRINGENCY=SILENT \
#             OPTICAL_DUPLICATE_PIXEL_DISTANCE=2500 \
#             ASSUME_SORT_ORDER='queryname' \
#             MAX_RECORDS_IN_RAM=94000000"

rule MergeRealignedBamRGsAndMarkDuplicates:
    input: lambda wildcards: expand("out/{sample}.aligned_unaligned_merged.bam", sample=config["samples"][wildcards.sample])
    output: "out/{sample}.merged.RGmerged.dedup.bam"
    params: n="1", R="'span[hosts=1] rusage[mem=130]'", o="out/logs/markdups.out", eo="out/logs/markdups.err", J="markdups"
    shell: "java -Xmx350g -jar picard.jar MarkDuplicates -Xmx128g TMP_DIR={TMP} \
            $(echo '{input}' | sed -r \'s/[^ ]+/INPUT=&/g') \
	        OUTPUT={output} \
            METRICS_FILE='{WD}/out/logs/markdups.metrics' \
            VALIDATION_STRINGENCY=SILENT \
            OPTICAL_DUPLICATE_PIXEL_DISTANCE=2500 \
            ASSUME_SORT_ORDER='queryname' \
	        MAX_RECORDS_IN_RAM=32000000 \
            CREATE_MD5_FILE=true"

rule SortAndFixRealignedBamTags:
    input: "out/{sample}.merged.RGmerged.dedup.bam"
    output: bam="out/{sample}.merged.RGmerged.dedup.fixedtags.readyforBQSR.bam", \
            idx="out/{sample}.merged.RGmerged.dedup.fixedtags.readyforBQSR.bai"
    benchmark: "out/benchmarks/SortAndFixTags.txt"
    params: n="36", R="'span[hosts=1] rusage[mem=10]'", \
            o="out/logs/sort_fix_tags.out", eo="out/logs/sort_fix_tags.err", \
            J="sort_fix_tags"
    shell: "sambamba sort -t {params.n} -m 350G --tmpdir {TMP} -o /dev/stdout {input} | \
            java -Xmx350g -jar picard.jar SetNmMdAndUqTags -Xmx64g TMP_DIR={TMP} \
            INPUT=/dev/stdin \
            OUTPUT={output.bam} \
            CREATE_INDEX=true \
            CREATE_MD5_FILE=true \
	        MAX_RECORDS_IN_RAM=16000000 \
            REFERENCE_SEQUENCE={config[ref]}"
