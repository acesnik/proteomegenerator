# Inputs fastq reads and performs preprocessing
# Outputs analysis-ready bam files for variant calls

shell.executable("/bin/bash")
singularity: "docker://continuumio/miniconda3:4.5.4"

# Begin User Variables - edit in config-preprocess.yaml file
WD = config["directories"]["work_directory"]
workdir: WD
TMP = config["directories"]["temporary_directory"]

# Reference assembly must have dictionary and index in same directory
REF_FASTA = config["references"]["fasta"]
REF_SNP = config["references"]["snp"]
REF_INDEL = config["references"]["indel"]

FASTQ1 = config["fastq"]["one"]
FASTQ2 = config["fastq"]["two"]
ID_NAME = config["readgroup"]["id"]
SAMPLE_NAME = config["readgroup"]["sample"]
LIBRARY_NAME = config["readgroup"]["library"]
PLATFORM = config["readgroup"]["platform"]
SEQUENCING_CENTER = config["readgroup"]["sequencing_center"]
RUN_DATE = config["readgroup"]["run_date"]
# End User Variables

# Create readgroup header used in alignment
RG_HEADER = "@RG\\tID:"+ID_NAME+"\\tSM:"+SAMPLE_NAME+"\\tLB:"+LIBRARY_NAME+"\\tPL:"+PLATFORM+"\\tCN:"+SEQUENCING_CENTER+"\\tDT:"+RUN_DATE

snakemake.utils.makedirs('out')
snakemake.utils.makedirs('out/logs/preprocess')

rule all:
    input: expand("out/preprocess/{SAMPLE_NAME}.recal.analysis_ready.bam", SAMPLE_NAME = SAMPLE_NAME)

rule UnalignFastqReadsByRG:
    input: fastq1 = {FASTQ1}, fastq2 = {FASTQ2}
    output: "out/preprocess/{SAMPLE_NAME}.unaligned.bam"
    benchmark: "out/benchmarks/preprocess/{SAMPLE_NAME}.unaligned.txt"
    conda: "envs/preprocess.yaml"
    params: n="20", R="'span[hosts=1] rusage[mem=10]'", \
            o="out/logs/preprocess/picard_unalign.out", eo="out/logs/preprocess/picard_unalign.err", J="picard_unalign"
    shell: "java -Xmx350g -jar picard.jar FastqToSam \
            FASTQ={input.fastq1} \
            FASTQ2={input.fastq2} \
            OUTPUT={output} \
            READ_GROUP_NAME={ID_NAME} \
            SAMPLE_NAME={SAMPLE_NAME} \
            SEQUENCING_CENTER={SEQUENCING_CENTER} \
            RUN_DATE={RUN_DATE} \
            LIBRARY_NAME={LIBRARY_NAME} \
            PLATFORM={PLATFORM}"

rule AlignFastqReadsByRG:
    input: fastq1 = {FASTQ1}, fastq2 = {FASTQ2}
    output: "out/preprocess/{SAMPLE_NAME}.aligned.bam"
    benchmark: "out/benchmarks/preprocess/{SAMPLE_NAME}.align.txt"
    conda: "envs/preprocess.yaml"
    params: n="20", R="'span[hosts=1] rusage[mem=10]'", \
            o="out/logs/preprocess/bwa_fastq.out", eo="out/logs/preprocess/bwa_fastq.err", J="bwa_align"
    shell: "bwa mem -M \
            -t {params.n} \
            -R '{RG_HEADER}' \
            {REF_FASTA} \
            {input.fastq1} {input.fastq2} | \
            samtools sort -@{params.n} -o {output} -"

rule MergeUnmappedAndAlignedBAMs:
    input: aligned="out/preprocess/{SAMPLE_NAME}.aligned.bam", unaligned="out/preprocess/{SAMPLE_NAME}.unaligned.bam"
    output: "out/preprocess/{SAMPLE_NAME}.aligned_unaligned_merged.bam"
    benchmark: "out/benchmarks/preprocess/{SAMPLE_NAME}.merge_aubam.txt"
    conda: "envs/preprocess.yaml"
    params: n="36", R="'span[hosts=1] rusage[mem=10]'", \
            o="out/logs/preprocess/merge_aubam.out", eo="out/logs/preprocess/merge_aubam.err", J="merge_aubam"
    shell: "java -Xmx350g -jar picard.jar MergeBamAlignment \
            TMP_DIR={TMP} \
            VALIDATION_STRINGENCY=SILENT \
            EXPECTED_ORIENTATIONS=FR \
            ATTRIBUTES_TO_RETAIN=X0 \
            ALIGNED_BAM={input.aligned} \
            UNMAPPED_BAM={input.unaligned} \
            OUTPUT={output} \
            REFERENCE_SEQUENCE={REF_FASTA} \
            PAIRED_RUN=true \
            SORT_ORDER='unsorted' \
            IS_BISULFITE_SEQUENCE=false \
            ALIGNED_READS_ONLY=false \
            CLIP_ADAPTERS=false \
            MAX_RECORDS_IN_RAM=85000000 \
            ADD_MATE_CIGAR=true \
            MAX_INSERTIONS_OR_DELETIONS=-1 \
            PRIMARY_ALIGNMENT_STRATEGY=MostDistant \
            UNMAP_CONTAMINANT_READS=true"

rule MarkDuplicates:
    input: "out/preprocess/{SAMPLE_NAME}.aligned_unaligned_merged.bam"
    output: "out/preprocess/{SAMPLE_NAME}.merged.RGmerged.dedup.bam"
    benchmark: "out/benchmarks/preprocess/{SAMPLE_NAME}.markdups.txt"
    conda: "envs/preprocess.yaml"
    params: n="1", R="'span[hosts=1] rusage[mem=130]'", \
            o="out/logs/preprocess/markdups.out", eo="out/logs/preprocess/markdups.err", J="markdups"
    shell: "java -Xmx350g -jar picard.jar MarkDuplicates TMP_DIR={TMP} \
            INPUT={input} \
	        OUTPUT={output} \
            METRICS_FILE='{WD}/out/logs/markdups.metrics' \
            VALIDATION_STRINGENCY=SILENT \
            OPTICAL_DUPLICATE_PIXEL_DISTANCE=2500 \
            ASSUME_SORT_ORDER='queryname' \
	        MAX_RECORDS_IN_RAM=32000000 \
            CREATE_MD5_FILE=true"

rule SortAndFixRealignedBamTags:
    input: "out/preprocess/{SAMPLE_NAME}.merged.RGmerged.dedup.bam"
    output: bam="out/preprocess/{SAMPLE_NAME}.merged.RGmerged.dedup.fixedtags.readyforBQSR.bam", \
            idx="out/preprocess/{SAMPLE_NAME}.merged.RGmerged.dedup.fixedtags.readyforBQSR.bai"
    benchmark: "out/benchmarks/preprocess/{SAMPLE_NAME}_SortAndFixTags.txt"
    conda: "envs/preprocess.yaml"
    params: n="36", R="'span[hosts=1] rusage[mem=10]'", \
            o="out/logs/preprocess/sort_fix_tags.out", eo="out/logs/preprocess/sort_fix_tags.err", J="sort_fix_tags"
    shell: "sambamba sort -t {params.n} -m 350G --tmpdir {TMP} -o /dev/stdout {input} | \
            java -Xmx350g -jar picard.jar SetNmMdAndUqTags TMP_DIR={TMP} \
            INPUT=/dev/stdin \
            OUTPUT={output.bam} \
            CREATE_INDEX=true \
            CREATE_MD5_FILE=true \
	        MAX_RECORDS_IN_RAM=16000000 \
            REFERENCE_SEQUENCE={REF_FASTA}"

rule BaseRecalibrator:
    input: bam="out/preprocess/{SAMPLE_NAME}.merged.RGmerged.dedup.fixedtags.readyforBQSR.bam"
    output: "out/preprocess/{SAMPLE_NAME}.BQSR.report"
    benchmark: "out/benchmarks/preprocess/{SAMPLE_NAME}_BQSR.txt"
    conda: "envs/preprocess.yaml"
    params: n="1", R="'span[hosts=1] rusage[mem=130]'", \
	        o="out/logs/preprocess/recal.out", eo="out/logs/preprocess/recal.err", J="base_recal"
    shell: "gatk --java-options -Xmx350g BaseRecalibrator \
            -R {REF_FASTA} -I {input.bam} \
	        --use-original-qualities -O {output} \
            --known-sites {REF_SNP} --known-sites {REF_INDEL}"

rule ApplyBQSR:
    input: bqsr="out/preprocess/{SAMPLE_NAME}.BQSR.report", bam="out/preprocess/{SAMPLE_NAME}.merged.RGmerged.dedup.fixedtags.readyforBQSR.bam"
    output: "out/preprocess/{SAMPLE_NAME}.recal.analysis_ready.bam"
    benchmark: "out/benchmarks/preprocess/{SAMPLE_NAME}_apply_bqsr.txt"
    conda: "envs/preprocess.yaml"
    params: n="1", R="'span[hosts=1] rusage[mem=15]'", \
	        o="out/logs/preprocess/apply_bqsr.out", eo="out/logs/preprocess/apply_bqsr.err", J="apply_bqsr"
    shell: "gatk --java-options -Xmx350g ApplyBQSR \
	       -R {REF_FASTA} -I {input.bam} -O {output} \
	       -bqsr {input.bqsr} \
           --static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30 \
           --add-output-sam-program-record \
           --use-original-qualities"
