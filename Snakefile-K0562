shell.executable("/bin/bash")

singularity: "docker://continuumio/miniconda3:4.5.4"

import os, multiprocessing
SMDir = os.getcwd()

# PAR initializes to template parameter file unless one is provided
MQ = SMDir + "/MaxQuant/bin/MaxQuantCmd.exe"
PAR = SMDir + "/MaxQuant/mqpar_template.xml"

### Begin User Variables

# Directories
WD = "/lila/data/kentsis/testfiles/K0562_warm/"
workdir: WD
TMP = '/scratch/chenz4'

# References
FASTA='/data/poirier/indexes/GRCh38/GRCh38.genome.fa'
# Comment out or delete the "GTF" variable to force de novo mode
GTF='/data/poirier/indexes/GRCh38/gencode.v20.annotation.gtf'
INDEX = '/data/poirier/indexes/GRCh38/STAR'
UNIPROT="/data/poirier/indexes/uniprot/UP000005640.fasta"

# Samples
K0562 = 'FCH9EFLADXX-HUMbghEAACRAAPEI-225'.split()
SAMPLES = K0562
L1R1="/data/kentsis/RNAseq/K0562/{sample}_L1_1.fq.gz"
L2R1="/data/kentsis/RNAseq/K0562/{sample}_L2_1.fq.gz"
L1R2="/data/kentsis/RNAseq/K0562/{sample}_L1_2.fq.gz"
L2R2="/data/kentsis/RNAseq/K0562/{sample}_L2_2.fq.gz"

# MaxQuant
RAW = "/lila/data/kentsis/testfiles/K056PGTest"
THREADS = str(multiprocessing.cpu_count())

### End User Variables

if os.path.exists(SMDir + "/MaxQuant/mqpar.xml") :
    PAR = SMDir + "/MaxQuant/mqpar.xml"

if 'GTF' in locals():
    ruleorder: STAR_GTF > STAR_denovo
    MODELS = 'merged reference'.split()
else:
    ruleorder: STAR_denovo > STAR_GTF
    MODELS = 'merged'

snakemake.utils.makedirs(TMP)
snakemake.utils.makedirs('out/benchmarks')

rule all:
    input: expand("out/all-merge/{model}/combined/txt/summary.txt", model=MODELS)

include: "pgm"

rule STAR_GTF:
    input: l1r1=L1R1, l2r1=L2R1, l1r2=L1R2, l2r2=L2R2, index=INDEX
    output: temp("out/{sample}.Aligned.sortedByCoord.out.bam")
    benchmark: "out/benchmarks/{sample}.align.json"
    log: "out/logs/{sample}.align.txt"
    conda: "envs/myenv.yaml"
    params: n="12", R="'span[hosts=1] rusage[mem=20]'", J="align", o="out/logs/align.out", eo="out/logs/align.err"
    shell: "STAR \
        --genomeDir {input.index} \
        --readFilesIn {input.l1r1},{input.l2r1} {input.l1r2},{input.l2r2} \
        --outFileNamePrefix out/{wildcards.sample}. \
        --outSAMattributes NH HI XS \
        --outSAMattrRGline ID:{wildcards.sample} LB:1 PL:illumina PU:1 SM:{wildcards.sample} \
        --runThreadN {params.n} \
        --outSAMtype BAM SortedByCoordinate \
        --clip3pAdapterSeq AGATCGGAAGAG \
        --readFilesCommand zcat \
        --twopassMode Basic \
        --outSAMstrandField intronMotif \
        --outFilterIntronMotifs None \
        --outReadsUnmapped None \
        --chimSegmentMin 15 \
        --chimJunctionOverhangMin 15 \
        --alignMatesGapMax 1000000 \
        --alignIntronMax 1000000 \
        --outFilterType Normal \
        --alignSJDBoverhangMin 1 \
        --alignSJoverhangMin 8 \
        --outFilterMismatchNmax 1 \
        --outSJfilterReads Unique \
        --outFilterMultimapNmax 10 \
        --sjdbOverhang 100 \
        --sjdbGTFfile {GTF} \2 > {log}"

rule STAR_denovo:
    input: l1r1=L1R1, l2r1=L2R1, l1r2=L1R2, l2r2=L2R2, index=INDEX
    output: temp("out/{sample}.Aligned.sortedByCoord.out.bam")
    benchmark: "out/benchmarks/{sample}.align.json"
    log: "out/logs/{sample}.align.txt"
    conda: "envs/myenv.yaml"
    params: n="12", R="'span[hosts=1] rusage[mem=20]'", J="align", o="out/logs/align.out", eo="out/logs/align.err"
    shell: "STAR \
        --genomeDir {input.index} \
        --readFilesIn {input.l1r1},{input.l2r1} {input.l1r2},{input.l2r2} \
        --outFileNamePrefix out/{wildcards.sample}. \
        --outSAMattributes NH HI XS \
        --outSAMattrRGline ID:{wildcards.sample} LB:1 PL:illumina PU:1 SM:{wildcards.sample} \
        --runThreadN {params.n} \
        --outSAMtype BAM SortedByCoordinate \
        --clip3pAdapterSeq AGATCGGAAGAG \
        --readFilesCommand zcat \
        --twopassMode Basic \
        --outSAMstrandField intronMotif \
        --outFilterIntronMotifs None \
        --outReadsUnmapped None \
        --chimSegmentMin 15 \
        --chimJunctionOverhangMin 15 \
        --alignMatesGapMax 1000000 \
        --alignIntronMax 1000000 \
        --outFilterType Normal \
        --alignSJDBoverhangMin 1 \
        --alignSJoverhangMin 8 \
        --outFilterMismatchNmax 1 \
        --outSJfilterReads Unique \
        --outFilterMultimapNmax 10 \
        --sjdbOverhang 100 \2 > {log}"


#snakemake --snakefile Snakefile-K0562 --cluster "bsub -J {params.J} -n {params.n} -R {params.R} -W 4:00 -o {params.o} -eo {params.eo}" --jn {rulename}.{jobid}.sj -j 50 -k --latency-wait 60 --use-conda --use-singularity --singularity-args "--bind /data:/data,/lila:/lila" --ri -n
# --rulegraph | dot -Tpdf > dag.pdf