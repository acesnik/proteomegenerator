shell.executable("/bin/bash")

singularity: "docker://continuumio/miniconda3:4.5.4"

import os, multiprocessing
SMDir = os.getcwd()

# PAR initializes to template parameter file unless one is provided
MQ = SMDir + "/MaxQuant/bin/MaxQuantCmd.exe"
PAR = SMDir + "/MaxQuant/mqpar_template.xml"

### Begin User Variables

# Directories
WD = config["directories"]["work_directory"]
workdir: WD
TMP = config["directories"]["temporary_directory"]

# References
FASTA=config["references"]["fasta"]
# If GTF file exists, then use it. Else, run on de novo mode
GTF=config["references"]["gtf"]
INDEX = config["references"]["index"]
UNIPROT=config["references"]["uniprot"]

# Samples
SAMPLES = config["samples"]["name"].split()
READ_ONE = ",".join(list(config["samples"]["read_one"]))
READ_TWO = ",".join(list(config["samples"]["read_two"]))

# MaxQuant
RAW = config["maxquant"]["raw_directory"]
THREADS = config["maxquant"]["threads"]

### End User Variables

if os.path.exists(SMDir + "/MaxQuant/mqpar.xml") :
    PAR = SMDir + "/MaxQuant/mqpar.xml"

if os.path.exists(GTF):
    ruleorder: STAR_GTF > STAR_denovo
    MODELS = 'merged reference'.split()
else:
    ruleorder: STAR_denovo > STAR_GTF
    MODELS = 'merged'

snakemake.utils.makedirs(TMP)
snakemake.utils.makedirs('out/benchmarks')

rule all:
    input: expand("out/all-merge/{model}/combined/txt/summary.txt", model=MODELS), expand("out/all-merge/{model}/proteome.bed",model=MODELS)

include: "pgm"

rule STAR_GTF:
    input: index=INDEX
    output: temp("out/{sample}.Aligned.sortedByCoord.out.bam")
    benchmark: "out/benchmarks/{sample}.align.json"
    log: "out/logs/{sample}.align.txt"
    conda: "envs/myenv.yaml"
    params: n="12", R="'span[hosts=1] rusage[mem=20]'", J="align", o="out/logs/align.out", eo="out/logs/align.err"
    shell: "STAR \
        --genomeDir {input.index} \
        --readFilesIn {READ_ONE} {READ_TWO} \
        --outFileNamePrefix out/{wildcards.sample}. \
        --outSAMattributes NH HI XS \
        --outSAMattrRGline ID:{wildcards.sample} LB:1 PL:illumina PU:1 SM:{wildcards.sample} \
        --runThreadN {params.n} \
        --outSAMtype BAM SortedByCoordinate \
        --clip3pAdapterSeq AGATCGGAAGAG \
        --readFilesCommand zcat \
        --twopassMode Basic \
        --outSAMstrandField intronMotif \
        --outFilterIntronMotifs None \
        --outReadsUnmapped None \
        --chimSegmentMin 15 \
        --chimJunctionOverhangMin 15 \
        --alignMatesGapMax 1000000 \
        --alignIntronMax 1000000 \
        --outFilterType Normal \
        --alignSJDBoverhangMin 1 \
        --alignSJoverhangMin 8 \
        --outFilterMismatchNmax 1 \
        --outSJfilterReads Unique \
        --outFilterMultimapNmax 10 \
        --sjdbOverhang 100 \
        --sjdbGTFfile {GTF} \2 > {log}"

rule STAR_denovo:
    input: index=INDEX
    output: temp("out/{sample}.Aligned.sortedByCoord.out.bam")
    benchmark: "out/benchmarks/{sample}.align.json"
    log: "out/logs/{sample}.align.txt"
    conda: "envs/myenv.yaml"
    params: n="12", R="'span[hosts=1] rusage[mem=20]'", J="align", o="out/logs/align.out", eo="out/logs/align.err"
    shell: "STAR \
        --genomeDir {input.index} \
        --readFilesIn {READ_ONE} {READ_TWO} \
        --outFileNamePrefix out/{wildcards.sample}. \
        --outSAMattributes NH HI XS \
        --outSAMattrRGline ID:{wildcards.sample} LB:1 PL:illumina PU:1 SM:{wildcards.sample} \
        --runThreadN {params.n} \
        --outSAMtype BAM SortedByCoordinate \
        --clip3pAdapterSeq AGATCGGAAGAG \
        --readFilesCommand zcat \
        --twopassMode Basic \
        --outSAMstrandField intronMotif \
        --outFilterIntronMotifs None \
        --outReadsUnmapped None \
        --chimSegmentMin 15 \
        --chimJunctionOverhangMin 15 \
        --alignMatesGapMax 1000000 \
        --alignIntronMax 1000000 \
        --outFilterType Normal \
        --alignSJDBoverhangMin 1 \
        --alignSJoverhangMin 8 \
        --outFilterMismatchNmax 1 \
        --outSJfilterReads Unique \
        --outFilterMultimapNmax 10 \
        --sjdbOverhang 100 \2 > {log}"

#snakemake --snakefile Snakefile-K0562 --cluster "bsub -J {params.J} -n {params.n} -R {params.R} -W 4:00 -o {params.o} -eo {params.eo}" --jn {rulename}.{jobid}.sj -j 50 -k --latency-wait 60 --use-conda --use-singularity --singularity-args "--bind /data:/data,/lila:/lila" --ri -n
# --rulegraph | dot -Tpdf > dag.pdf