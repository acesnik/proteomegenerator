# Mutect2 needs ref_fasta, ref_fai, ref_dict
# Optional - use intervals -> first implement without intervals

# Secondary inputs: pon, gnomad, variants_for_contamination

# Inputs to this script: ref_fasta
# Outputs .vcf and index file

shell.executable("/bin/bash")
import glob,os,subprocess
WD="/lila/data/kentsis/testfiles/K052M2_test/"
workdir: WD
TMP = "/scratch/chenz4"

snakemake.utils.makedirs('out')

# Begin Config files
singularity: "docker://continuumio/miniconda3:4.5.4"

# Provided by Broad Institute, but can be created with 'picard CreateSequenceDictionary' and 'samtools faidx'
REF_FASTA = "/lila/data/kentsis/testfiles/m2_test/m2/resources_broad_hg38_v0_Homo_sapiens_assembly38.fasta"
REF_DICT = "/lila/data/kentsis/testfiles/m2_test/m2/resources_broad_hg38_v0_Homo_sapiens_assembly38.dict"
REF_INDEX = "/lila/data/kentsis/testfiles/m2_test/m2/resources_broad_hg38_v0_Homo_sapiens_assembly38.fasta.fai"

TUMOR = "/lila/data/kentsis/testfiles/K052M2_test/k052_chr.bam"
#NORMAL = "/lila/data/kentsis/testfiles/m2_test/m2/normal.bam"

#DBSNP = "/home/chenz4/customRef/reference/Homo_sapiens_assembly38.dbsnp138.vcf"
#COSMIC = "/home/chenz4/customRef/reference/resources_broad_hg38_v0_Homo_sapiens_assembly38.known_indels.vcf.gz"
PON = "/lila/data/kentsis/testfiles/m2_test/m2/chr17_m2pon.vcf.gz"
# Database of known germline variants. Population vcf of germline sequencing containing allele fractions.
GERM_RES = "/lila/data/kentsis/testfiles/m2_test/m2/chr17_af-only-gnomad_grch38.vcf.gz"
INT_LIST =  "/lila/data/kentsis/testfiles/m2_test/m2/chr17plus.interval_list"

# Common germline variant sites VCF with allele freq to calculate contamination
GNOMAD = "/lila/data/kentsis/testfiles/m2_test/m2/chr17_small_exac_common_3_grch38.vcf.gz"
# End Config files

RG_TUMOR = "K052_tumor"
#RG_NORMAL = "HCC1143_normal"

#Lists VCF samples names one by one
VCF_INDIVIDUAL = "HCC1143_tumor"

REF_GTF="/lila/data/poirier/indexes/GRCh38/gencode.v20.annotation.gtf"

GATK3_JAR = "/lila/data/kentsis/testfiles/CR_test/GenomeAnalysisTK.jar"

rule all:
    input: "out/custom_ref/sample_ref.fa"

#Comparing both tumor and normal sample
#Last line can be removed - added for igv viewing purposes
#rule Mutect2:
#    input: tumor=TUMOR,normal=NORMAL
#    output: vcf="out/sample_m2.vcf.gz", idx="out/sample_m2.vcf.gz.tbi"
#    benchmark: "out/benchmarks/MuTect2.txt"
#    conda: "env.yaml"
#    params: n="20", R="'span[hosts=1] rusage[mem=20]'", o="out/logs/mutect.out", eo="out/logs/mutect.err", J="mutect2"
#    shell: "gatk --java-options -Xmx8g Mutect2 \
#            -R {REF_FASTA} \
#            -I {input.tumor} \
#            -I {input.normal}\
#            -tumor {RG_TUMOR} \
#            -normal {RG_NORMAL} \
#            -pon {PON} \
#            --germline-resource {GERM_RES} \
#            --af-of-alleles-not-in-resource 0.0000025 \
#            --disable-read-filter MateOnSameContigOrNoMappedMateReadFilter \
#            -L {INT_LIST} \
#            -O {output.vcf} \
#            -bamout out/2_tumor_normal_m2.bam"

#Tumor-only mode
rule Mutect2:
    input: tumor=TUMOR
    output: vcf="out/sample_m2.vcf.gz", idx="out/sample_m2.vcf.gz.tbi"
    benchmark: "out/benchmarks/MuTect2.txt"
    conda: "env.yaml"
    params: n="20", R="'span[hosts=1] rusage[mem=20]'", o="out/logs/mutect.out", eo="out/logs/mutect.err", J="mutect2"
    shell: "gatk --java-options -Xmx8g Mutect2 \
            -R {REF_FASTA} \
            -I {input.tumor} \
            -tumor {RG_TUMOR} \
            -O {output.vcf}"



# Estimating cross-sample contamination
rule PileupSummaries:
    input: gnomad = GNOMAD
    output: table = "out/sample_m2_summary.table"
    benchmark: "out/benchmarks/M2_PS.txt"
    conda: "env.yaml"
    params: n="10", R="'span[hosts=1] rusage[mem=20]'", o="out/logs/m2_ps.out", eo="out/logs/m2_ps.err", J="M2_PS"
    shell: "gatk --java-options -Xmx8g GetPileupSummaries \
            -I {TUMOR} \
            -V {input.gnomad} \
            -O {output.table}"

rule CalculateContamination:
    input: table = "out/sample_m2_summary.table"
    output: table = "out/sample_m2_contamination.table"
    benchmark: "out/benchmarks/M2_CT.txt"
    conda: "env.yaml"
    params: n="10", R="'span[hosts=1] rusage[mem=20]'", o="out/logs/m2_ct.out", eo="out/logs/m2_ct.err", J="M2_CT"
    shell: "gatk --java-options -Xmx8g CalculateContamination \
            -I {input.table} \
            -O {output.table}"

# Filter contaminants
rule FilterMutectCalls:
    input: vcf="out/sample_m2.vcf.gz", idx="out/sample_m2.vcf.gz.tbi", table = "out/sample_m2_contamination.table"
    output: vcf="out/sample_m2_filtered.vcf.gz", idx="out/sample_m2_filtered.vcf.gz.tbi"
    benchmark: "out/benchmarks/M2_PS.txt"
    conda: "env.yaml"
    params: n="10", R="'span[hosts=1] rusage[mem=20]'", o="out/logs/m2_ps.out", eo="out/logs/m2_ps.err", J="M2_PS"
    shell: "gatk --java-options -Xmx8g FilterMutectCalls \
            -V {input.vcf} \
            --contamination-table {input.table} \
            -O {output.vcf}"

# Custom reference .fasta and .gtf creation
rule vcf2fasta:
    input: vcf="out/sample_m2_filtered.vcf.gz", idx="out/sample_m2.vcf.gz.tbi"
    output: "out/custom_ref/sample_ref.fa"
    benchmark: "out/benchmarks/vcf2fasta.txt"
    log: "out/logs/vcf2fasta.txt"
    conda: "env.yaml"
    params: n="4", R="'span[hosts=1] rusage[mem=8]'", \
	    o="out/logs/vcf2fasta.out", eo="out/logs/vcf2fasta.err", \
	    J="vcf2fasta"
    shell: "java -jar {GATK3_JAR} \
   		-T FastaAlternateReferenceMaker \
  		-R {REF_FASTA} \
   		-o {output} \
   		-V {input.vcf}"


