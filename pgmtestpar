rule mqpar_conversion:
    input: "/lila/data/kentsis/testfiles/cluster/180301_SwissProt_isoforms_cRAP.fasta", dummy = DUMMY, raw = RAW
    output: RAW + "/mqpar.xml"
    benchmark: "merged.mqpar_conversion.txt"
    log: "merged.mqpar_conversion.txt"
    params: t="68",n="1", R="'span[hosts=1] rusage[mem=10]'", J="mqpar_conversion", o="mqpar_conversion.out", eo="mqpar_conversion.err"
    run:
        import os
        raw_files = []
        for file in os.listdir(input[2]):
            if file.endswith(".raw"):
                raw_files.append(os.path.join(input[2], file))

        with open(input[1]) as oldMQPar, open(output[0],"w") as newMQPar:
            for line in oldMQPar:
                newMQPar.write(line)
                if '<FastaFileInfo>' in line:
                    newMQPar.write("<fastaFilePath>" + input[0] + "</fastaFilePath>\n")
                if '<pluginFolder></pluginFolder>' in line:
                    newMQPar.write("<numThreads>"+params.t+"</numThreads>\n")
                if '<filePaths>' in line:
                    for k in range(len(raw_files)):
                        newMQPar.write("<string>" + raw_files[k] + "</string>\n")
                if '<experiments>' in line:
                    for k in range(len(raw_files)):
                        newMQPar.write("<string></string>\n")
                if '<fractions>' in line:
                    for k in range(len(raw_files)):
                        newMQPar.write("<short>32767</short>\n")
                if '<ptms>' in line:
                    for k in range(len(raw_files)):
                        newMQPar.write("<boolean>False</boolean>\n")
                if '<paramGroupIndices>' in line:
                    for k in range(len(raw_files)):
                        newMQPar.write("<int>0</int>\n")

rule maxQuant:
    input: par = RAW + "/mqpar.xml", mq = MQ
    output: RAW + "/combined/txt/summary.txt"
    benchmark: "merged.maxQuant.txt"
    log: "merged.maxQuant.txt"
    singularity: "docker://mono"
    params: n="4", J="MQ", R="'span[ptile=68] rusage[mem=10]'", o="mq.out", eo="mq.err"
    shell: "mono {input.mq} {input.par}"
